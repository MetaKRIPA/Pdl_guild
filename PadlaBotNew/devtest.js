const getId = require("./getId");
const Markup = require("telegraf").Markup;

module.exports = async function () {

    bot.hears('/checker', async (ctx) => {
        try {
            Logger.Message(Logger.Mode.SERVER, `–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ( ${await getId(ctx)} )`);

            //Chat
            //await bot.telegram.kickChatMember(-1001722834076, 1471123906);
            //await bot.telegram.unbanChatMember(-1001722834076, 1471123906);

            //Canal
            //await bot.telegram.kickChatMember(-1001617337493, 1471123906);
            //await bot.telegram.unbanChatMember(-1001617337493, 436650398);

            /*await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏", {
                reply_markup: 'markdown',
                parse_mode: 'Html',
                ...Markup.keyboard([
                    '–û–ø–ª–∞—Ç–∏–ª'
                ]).resize()})*/


            const first_name = ctx.update.message.from.first_name || undefined;
            const last_name = ctx.update.message.from.last_name || undefined;
            const username = ctx.update.message.from.username || undefined;

            const UserCheck = await User.findOne({telegram: ctx.update.message.from.id}) || [];

            if(UserCheck.length !== 0){
                await User.updateOne({telegram: ctx.update.message.from.id}, {
                    first_name: first_name,
                    last_name: last_name,
                    username: username
                }).then(() => {
                    Logger.Message(Logger.Mode.DATABASE, `–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ( ${ctx.update.message.from.id} )`);
                })

                await ctx.reply(`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ PADLA —Å–æ–æ–±—â–µ—Å—Ç–≤–æ üòâ`);
            }

        } catch (e) {
            Logger.Error(Logger.Mode.PRIVATE, e.message);
        }
    });

    bot.hears('/sendAllUser', async (ctx) => {
        try {
            Logger.Message(Logger.Mode.SERVER, `–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ( ${await getId(ctx)} )`);

            const _user = await User.find();
            _user.forEach(async (u) => {
                try {
                    await ctx.telegram.sendMessage(u.telegram, `–ü—Ä–∏–≤–µ—Ç üëã

–î–∞ –¥–∞, –∫ —Ç–µ–±–µ –±–æ—Ç –æ–±—Ä–∞—â–∞–µ—Ç—Å—è, –¥—É–º–∞–ª —É –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏? –ê –≤–æ—Ç –∏ –Ω–µ —É–≥–∞–¥–∞–ª üôÉ

–¢–∞–∫ –≤–æ—Ç, —è –≤–æ–æ–±—â–µ-—Ç–æ –ø–æ –¥–µ–ª—É –∫ —Ç–µ–±–µ‚Ä¶ –•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ —Å—Ä–µ–¥–∏ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π –ø—Ä—è—á–µ—Ç—Å—è –ø–æ–¥ –æ–±–ª–∏—á–∏–µ–º –±–æ—Ç–∞, –∏ –∫–∞–∂–¥—É—é –Ω–æ—á—å –¥–µ–ª–∞–µ—Ç –º–Ω–µ –Ω–µ—Ä–≤—ã, –Ω—É –≤–æ—Ç –∫–∞–∫ —Ç–∞–∫ –º–æ–∂–Ω–æ? üòí

–ö —á–µ–º—É —è –≤–µ–¥—É‚Ä¶ –ù–µ –º–æ–≥ –±—ã —Ç—ã –Ω–∞–∂–∞—Ç—å –Ω–∞ –≤–æ—Ç —ç—Ç—É –≤–æ–ª—à–µ–µ–±–Ω—É—é –∫–Ω–æ–ø–æ—á–∫—É: /checker , –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è —É–±–µ–¥–∏–ª—Å—è, —á—Ç–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫–æ–π-—Ç–æ —Ç–∞–º –±–µ–∑—É–º–Ω—ã–π –±–æ—Ç? üòé

–ë—É–¥—É —Ç–µ–±–µ –∫—Ä–∞–∞–∞–∞–π–Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω üíé`)
                    Logger.Message(Logger.Mode.PRIVATE, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + u.telegram)
                }catch (e) {
                    Logger.Error(Logger.Mode.PRIVATE, e.message);
                }

            })

        } catch (e) {
            Logger.Error(Logger.Mode.PRIVATE, e.message);
        }
    });

}