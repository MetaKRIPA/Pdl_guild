const Markup = require("telegraf").Markup;
const getId = require("../getId");
const isGroup = require("../isGroup");
const {execFile} = require('node:child_process');
const getNFT = require('./getNFT');
const getSaleNFT = require('./getSaleNFT');

module.exports = async function () {
    bot.hears('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', async (ctx) => {
        try {
            if (await isGroup(ctx)) return;

            const dbData = await User.findOne({telegram: getId(ctx)});
            if(!dbData || !dbData.wallet) {
                if(!dbData) {
                    await new User({
                        telegram: getId(ctx),
                        first_name: ctx.update.message.chat?.first_name || null,
                        last_name: ctx.update.message.chat?.last_name || null,
                        username: ctx.update.message.chat?.username || null,
                        status: "authorization",
                        wallet: '',
                        nfts: []
                    }).save(async () => {
                        Logger.Message(Logger.Mode.DATABASE, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ( ${getId(ctx)} )`)
                    })
                }
                console.log('./profile/tonkeeper/auth.js');
                const ress = execFile('node', ['./profile/tonkeeper/auth.js', getId(ctx)], (error, stdout, stderr) => {
                    console.log('stdout', stdout);
                    if (error) {
                        console.log('error', error);
                    }
                    console.log(stderr);
                });

                ress.on('close', async (code) => {
                    console.log('code', code);
                    if(code === 0) {
                        const user = await User.findOne({telegram: getId(ctx)});
                        const _getNFT = await getNFT(user.wallet, getId(ctx));
                        console.log('getNFT', _getNFT);
                        const _getSaleNFT = await getSaleNFT(user.wallet, getId(ctx));
                        console.log('_getSaleNFT', _getSaleNFT);
                        const nftUser = _getNFT.concat(_getSaleNFT);

                        if(nftUser.length !== 0){
                            Logger.Message(Logger.Mode.NFT, `–í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${nftUser.length} –Ω—É–∂–Ω—ã—Ö NFT ( ${_id} )`);

                            await ctx.replyWithAnimation("https://tgbot.qteam.digital/padla/welcome.mp4",
                                {
                                    caption: '–£—Ä–∞, —Ç–µ–ø–µ—Ä—å —Ç—ã <b>PADLA</b>. \n' +
                                        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∏–ª—å–¥–∏—é ü§ó',
                                    parse_mode: 'Html',
                                    ...Markup.keyboard([
                                        ['üë• –ö–∞–Ω–∞–ª—ã','üí¨ –ß–∞—Ç—ã'],
                                        ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', '‚úñÔ∏è –í—ã–π—Ç–∏']
                                    ]).resize(),
                                });

                            const removeUser = await RemoveUser.findOne({telegram: getId(ctx)});

                            if(removeUser){
                                for await (let chat of Chats) {
                                    await bot.telegram.unbanChatMember(chat.id, getId(ctx));
                                    Logger.Message(Logger.Mode.REMOVE, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ ${chat.id} ( ${getId(ctx)} )`);
                                }

                                for await (let channel of Channel) {
                                    await bot.telegram.unbanChatMember(channel.id, getId(ctx));
                                    Logger.Message(Logger.Mode.REMOVE, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ ${channel.id} ( ${getId(ctx)} )`);
                                }

                                await RemoveUser.deleteOne({telegram: getId(ctx)}).then(async () => {
                                    Logger.Message(Logger.Mode.DATABASE, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω —Å RemoveUser ( ${getId(ctx)} )`);
                                });
                            }
                            await User.findByIdAndUpdate(user._id, {
                                nfts: nftUser
                            })

                            Logger.Message(Logger.Mode.PRIVATE, `–°–æ–≤–µ—Ä—à–µ–Ω –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç ( ${getId(ctx)} )`);
                        } else {
                            Logger.Message(Logger.Mode.NFT, `–í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω—É–∂–Ω—ã—Ö NFT ( ${getId(ctx)} )`);
                            await User.deleteOne({telegram: getId(ctx)}).then(async () => {
                                Logger.Message(Logger.Mode.DATABASE, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω" + ` ( ${getId(ctx)} )`)
                            });


                            await ctx.reply(`<b>ü§∑‚Äç‚ôÇ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π <b><a href="https://getgems.io/collection/padla-bear">PADLA NFT</a></b>.</b>\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –µ—ë –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "<b>–ò–ù–§–ê</b>"`, {
                                parse_mode: 'Html',
                                reply_markup: {
                                    inline_keyboard: [ [{text: "–ò–ù–§–ê", url: "https://t.me/PADLA_BEAR_COR_OF_G/109"}] ]
                                }
                            });


                        }
                    }
                });
            }



        } catch (e) {
            Logger.Error(Logger.Mode.PRIVATE, e.message);
        }
    });

}
