const isGroup = require("../isGroup");
const getId = require("../getId");
const Markup = require("telegraf").Markup;

module.exports = async function () {
    await bot.start(async (ctx) => {

        try {
            if (await isGroup(ctx)) return;

            const dbData = await User.findOne({telegram: await getId(ctx)});

            if (dbData !== null) return null;

            Logger.Message(Logger.Mode.PRIVATE, `–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start ( ${await getId(ctx)} )`);

            const AnimationUrl1 = 'https://tgbot.qteam.digital/padla/start.mp4'

            await ctx.replyWithAnimation(AnimationUrl1,
                {
                    caption: '–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é <b>–ü–∞–¥–ª–æ–π</b> üëπ\n' +
                        '\n' +
                        '<u>–ü—Ä–æ–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –≤—Å—Ç—É–ø–∞–π –≤ –Ω–∞—à–∏ —Ä—è–¥—ã.</u>',
                    parse_mode: 'Html',
                    ...Markup.keyboard([
                        '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
                    ]).resize(),
                });

            /*ctx.reply(`–î–∞—Ä–æ–≤–∞, –¥–∞–≤–∞–π–∫–∞ –ø—Ä–æ–π–¥—ë–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é`,
                Markup.keyboard(['–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è']).resize()
            );*/
        } catch (e) {
            Logger.Error(Logger.Mode.PRIVATE, e.message);
        }
    })
}