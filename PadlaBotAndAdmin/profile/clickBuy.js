const getId = require("../getId");
const Markup = require("telegraf").Markup;
const isGroup = require("../isGroup");
const checkTransaction = require("../checkTransaction");
const checkSpecificTransaction = require("../checkSpecificTransaction");
const getNFT = require("./getNFT");
const getSaleNFT = require("./getSaleNFT");

const g_checker = [];

module.exports = async function () {

    bot.hears('–û–ø–ª–∞—Ç–∏–ª', async (ctx) => {
        try {
            const _id = getId(ctx);

            if (g_checker.includes(_id)) return;

            g_checker.push(_id);

            const waitOrderText = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n\n<u>‚ùóÔ∏è–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É, —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è. –ï—Å–ª–∏ —ç—Ç–æ—Ç —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫, —Ç–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞. ‚ùóÔ∏è</u>";

            if (await isGroup(ctx)) return;

            const dbData = await User.findOne({telegram: _id});
            if(dbData) return;

            await ctx.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞...");


            const getAllTransactions = await checkTransaction(_id);

            if(getAllTransactions){

                const getSpecificTransaction = await checkSpecificTransaction(getAllTransactions, ctx);
                if(getSpecificTransaction.status){
                    Logger.Message(Logger.Mode.AXIOS, `–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ ( ${_id} )`);


                    ctx.reply("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω—É–∂–Ω—ã—Ö NFT...");
                    const _getNFT = await getNFT(getSpecificTransaction.wallet, _id);
                    const _getSaleNFT = await getSaleNFT(getSpecificTransaction.wallet, _id);
                    const nftUser = _getNFT.concat(_getSaleNFT);
                    if(nftUser.length !== 0){
                        Logger.Message(Logger.Mode.NFT, `–í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${nftUser.length} –Ω—É–∂–Ω—ã—Ö NFT ( ${_id} )`);

                        const myIndex = g_checker.indexOf(_id);
                        if (myIndex !== -1) g_checker.splice(myIndex, 1);

                        await ctx.replyWithAnimation("https://tgbot.qteam.digital/padla/welcome.mp4",
                            {
                                caption: '–£—Ä–∞, —Ç–µ–ø–µ—Ä—å —Ç—ã <b>PADLA</b>. \n' +
                                    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∏–ª—å–¥–∏—é ü§ó',
                                parse_mode: 'Html',
                                ...Markup.keyboard([
                                    ['–ö–∞–Ω–∞–ª—ã','–ß–∞—Ç—ã'],
                                    ['–ü—Ä–æ—Ñ–∏–ª—å', '–í—ã–π—Ç–∏']
                                ]).resize(),
                            });

                        const removeUser = await RemoveUser.findOne({telegram: _id});

                        if(removeUser){
                            for await (let chat of Chats) {
                                await bot.telegram.unbanChatMember(chat.id, _id);
                                Logger.Message(Logger.Mode.REMOVE, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ ${chat.id} ( ${_id} )`);
                            }

                            for await (let channel of Channel) {
                                await bot.telegram.unbanChatMember(channel.id, _id);
                                Logger.Message(Logger.Mode.REMOVE, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ ${channel.id} ( ${_id} )`);
                            }

                            await RemoveUser.deleteOne({telegram: await _id}).then(async () => {
                               Logger.Message(Logger.Mode.DATABASE, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω —Å RemoveUser ( ${_id} )`);
                            });
                        }

                        await new User({
                            telegram: _id,
                            status: "authorization",
                            wallet: getSpecificTransaction.wallet,
                            nfts: nftUser
                        }).save(async () => {
                            Logger.Message(Logger.Mode.DATABASE, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ( ${_id} )`)
                        })
                        Logger.Message(Logger.Mode.PRIVATE, `–°–æ–≤–µ—Ä—à–µ–Ω –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç ( ${_id} )`);
                    }else{
                        Logger.Message(Logger.Mode.NFT, `–í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω—É–∂–Ω—ã—Ö NFT ( ${_id} )`);
                        await User.deleteOne({telegram:_id}).then(async () => {
                            Logger.Message(Logger.Mode.DATABASE, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω" + ` ( ${_id} )`)
                        });


                        await ctx.reply(`<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π PADLA NFT.</b>\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –µ—ë –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "<b>–ò–ù–§–ê</b>"`, {
                            parse_mode: 'Html',
                            reply_markup: {
                                inline_keyboard: [ [{text: "–ò–ù–§–ê", url: "https://t.me/PADLA_BEAR_COR_OF_G/109"}] ]
                            }
                        });

                        const myIndex = g_checker.indexOf(_id);
                        if (myIndex !== -1) g_checker.splice(myIndex, 1);

                    }
                }else{
                    Logger.Message(Logger.Mode.AXIOS, `–û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ ( ${_id} )`);

                    const myIndex = g_checker.indexOf(_id);
                    if (myIndex !== -1) g_checker.splice(myIndex, 1);

                    await ctx.reply(waitOrderText, {
                        reply_markup: 'markdown',
                        parse_mode: 'Html',
                        ...Markup.keyboard([
                            '–û–ø–ª–∞—Ç–∏–ª'
                        ]).resize()
                    })
                }

            }else{

                const myIndex = g_checker.indexOf(_id);
                if (myIndex !== -1) g_checker.splice(myIndex, 1);

                await ctx.reply(waitOrderText, {
                    reply_markup: 'markdown',
                    parse_mode: 'Html',
                    ...Markup.keyboard([
                        '–û–ø–ª–∞—Ç–∏–ª'
                    ]).resize()
                })
            }

        } catch (e) {
            Logger.Error(Logger.Mode.PRIVATE, e.message);
        }
    });

}